@page "/nexplorer"
@using VideoManager.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IPizzaService PizzaService
@inject ITagService TagService
@inject IPizzaTagService PizzaTagService
@rendermode InteractiveServer


@if (!isConnected)
{
    <section>

    <h3>Pizzas!</h3>
    
    <h2>Loading Realm...</h2>

    </section>
}
else
{

    <section>

    <h3>Pizzas!</h3>
    
    <h2>Realm: @selectedRealm</h2>

	<p> Block 1: Search bar & preview </p>

    <div class="mb-3">

        <div class="mb-3">

        <Button @ref="goSearchButton" Color="ButtonColor.Primary" @onclick="HandleButtonGoSearchTagClick"> Search </Button>
        <Button @ref="clearSearchButton" Color="ButtonColor.Danger" @onclick="HandleButtonClearSearchTagClick"> Clear </Button>

        </div>

        @if (availableTags == null)
        {
            <Button Color="ButtonColor.Secondary" Loading="true" LoadingText="Tags Loading..." />
        }
        else
        {
            <Dropdown Color="DropdownColor.Secondary">
                <DropdownToggleButton>Tag Selection</DropdownToggleButton>
                <DropdownMenu>
                    @for (int i = 0; i < availableTags.Count; i++)
                    {
                        int j = i;
                        <DropdownItem Dropdown="" @onclick=@(_=>HandleSearchTagDropDownSelection(j)) Type="DropdownItemType.Button">@availableTags[j]</DropdownItem>
                    }
                </DropdownMenu>
            </Dropdown>
        }
    </div>

    <div class="mb-3">
        <Button Color="ButtonColor.Secondary"> Current Selection: </Button>
        
        @if (currentSearchTagList.Count > 0)
        {
            @for (int i = 0; i < currentSearchTagList.Count; i++)
            {
                int j = i;
                <Button Color="ButtonColor.Secondary"> @currentSearchTagList[j] </Button>
            }
        }

    </div>

    </section>

    <section>

	<p> Block 3: Search results listed </p>

    <p role="status">Current count: @currentPizza._name</p>

    @if (todaysPizzas == null)
    {
        <p role="status">No pizzas found...</p>
    }
    else
    {

        <Grid TItem="Pizza"
                AllowRowClick="true"
                AllowSorting="true"
                Class="table table-hover"
                Data="todaysPizzas"
                HeaderRowCssClass="bg-primary text-white border-bottom-0"
                OnRowClick="OnRowClick"
                Responsive="true">

            <GridColumns>

                <GridColumn TItem="Pizza" HeaderText="Thumbnail">
                    <img src="@context.thumbnail"
                            alt="thumbnail"
                            style="width:60px; height:60px; object-fit:cover; border-radius:8px;" />
                </GridColumn>

                <GridColumn TItem="Pizza" HeaderText="Name">
                    @context._name
                </GridColumn>

            </GridColumns>

        </Grid>
    }

    </section>
}


@code {

    private Pizza currentPizza = new Pizza();
    private List<Pizza> todaysPizzas = default!;

    private Tag currentTag = new Tag();
    private List<string> currentSearchTagList = new List<string>();
    private List<string> availableTags = default!;

    private EditContext editContext = default!;

    private Button addButton = default!;
    private Button deleteButton = default!;
    private Button goSearchButton = default!;
    private Button clearSearchButton = default!;

    private string? selectedRealm = default!;
    private bool isConnected;

    protected override void OnInitialized()
    {
        editContext = new EditContext(currentTag);
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        currentPizza._name = "";
        availableTags = await TagService.GetTagList();
        todaysPizzas = await PizzaService.GetPizzaList(currentSearchTagList);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await LoadRealmAsync();
            StateHasChanged();
        }
    }

    private async Task LoadRealmAsync()
    {
        var result = await ProtectedSessionStore.GetAsync<string>("selectedRealm");
        selectedRealm = result.Success ? result.Value : default!;
    }

    @*
    private async Task<GridDataProviderResult<Pizza>> PizzaDataProvider(GridDataProviderRequest<Pizza> request)
    {
        if (todaysPizzas is null)
            todaysPizzas = await PizzaService.GetPizzaList(currentSearchTagList);
        return await Task.FromResult(request.ApplyTo(todaysPizzas));
    }
    *@

    private async Task OnRowClick(GridRowEventArgs<Pizza> args)
    {
        currentPizza = args.Item;
        currentPizza.Tags = await PizzaTagService.GetTags(currentPizza.id);
        currentTag.Id = currentPizza.id;
    }

    protected void HandleDropDownSelection(int i)
    {
        currentTag.Value = availableTags[i];
    }

    protected void HandleTagButtonClick(int i)
    {
        currentTag.Value = currentPizza.Tags[i];
    }

    private async Task HandleButtonAddTagClick()
    {
        addButton.ShowLoading("Adding...");

        // await Task.Delay(1000);
        await PizzaTagService.CreateTag(currentTag.Id, currentTag.Value);
        currentPizza.Tags = await PizzaTagService.GetTags(currentPizza.id);

        addButton.HideLoading();
    }

    private async Task HandleButtonDeleteTagClick()
    {
        addButton.ShowLoading("Deleting...");

        // await Task.Delay(1000);
        await PizzaTagService.DeleteTag(currentTag.Id, currentTag.Value);
        currentPizza.Tags = await PizzaTagService.GetTags(currentPizza.id);

        addButton.HideLoading();
    }

    protected void HandleSearchTagDropDownSelection(int i)
    {
        if (!currentSearchTagList.Contains(availableTags[i]))
        {
            currentSearchTagList.Add(availableTags[i]);
            Console.WriteLine("ghoul?");
        }
    }

    private async Task HandleButtonGoSearchTagClick()
    {
        goSearchButton.ShowLoading("Searching...");

        todaysPizzas = await PizzaService.GetPizzaList(currentSearchTagList);
        currentPizza = new Pizza();

        goSearchButton.HideLoading();
    }

    private async Task HandleButtonClearSearchTagClick()
    {
        clearSearchButton.ShowLoading("Cleaning...");

        currentSearchTagList = new List<string>();

        clearSearchButton.HideLoading();
    }

}
